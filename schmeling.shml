<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">long</string_value>
  </length>
  <owner>
    <string_value lines="1">cwilson</string_value>
  </owner>
  <description>
    <string_value lines="1">Blankenbach 1a benchmark.</string_value>
  </description>
  <simulations>
    <simulation name="schmeling">
      <input_file>
        <string_value type="filename" lines="1">schmeling.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <number_processes>
        <integer_value rank="0">64</integer_value>
      </number_processes>
      <parameter_sweep>
        <parameter name="scalefactor">
          <values>
            <string_value lines="1">2.</string_value>
          </values>
          <comment>uniform scaling of mesh size for unstructured mesh.  i.e scalefactor=2 is twice as coarse</comment>
        </parameter>
        <parameter name="Ra">
          <values>
            <string_value lines="1">1.e5</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
# set the Ra number
libspud.set_option("/system::Coupled/coefficient::Ra/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Ra))

# set the finish time, z_tbl and Tinit which all depend on Ra
if Ra == '1.e4':
  z_tbl = 0.102367
  z_top = 1. - 3*z_tbl/2.
  libspud.set_option("/timestepping/finish_time",0.4*float(Ra))
  libspud.set_option("/io/detectors/point::z_tbl",[0.,z_top])
  libspud.set_option("/system::Coupled/coefficient::zi1/type::Constant/rank::Scalar/value::WholeMesh/constant",z_tbl)&#13;  libspud.set_option("/system::Coupled/coefficient::zi2/type::Constant/rank::Scalar/value::WholeMesh/constant",0.897633)
elif Ra == '1.e5':
  z_tbl =  0.047465
  z_top = 1. - 3.*z_tbl/2.
  libspud.set_option("/timestepping/finish_time",0.1*float(Ra))
  libspud.set_option("/io/detectors/point::z_tbl",[0.,z_top])
  libspud.set_option("/system::Coupled/coefficient::zi1/type::Constant/rank::Scalar/value::WholeMesh/constant",z_tbl)&#13;  libspud.set_option("/system::Coupled/coefficient::zi2/type::Constant/rank::Scalar/value::WholeMesh/constant",0.952535)
elif Ra == '1.e6':
  z_tbl =  0.022756
  z_top = 1. - 3.*z_tbl/2.
  libspud.set_option("/timestepping/finish_time",0.03*float(Ra))
  libspud.set_option("/io/detectors/point::z_tbl",[0.,z_top])
  libspud.set_option("/system::Coupled/coefficient::zi1/type::Constant/rank::Scalar/value::WholeMesh/constant",z_tbl)&#13;  libspud.set_option("/system::Coupled/coefficient::zi2/type::Constant/rank::Scalar/value::WholeMesh/constant",0.977244)
else:
  print('Ra number not recognized in parameter values')</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="cfl">
          <values>
            <string_value lines="1">1.</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud

libspud.set_option("/timestepping/timestep/adaptive/constraint::Courant/requested_maximum_value",float(cfl))</string_value>
            <single_build/>
          </update>
          <comment>max courant number</comment>
        </parameter>
        <parameter name="delta_f">
          <values>
            <string_value lines="1">0.01</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::Coupled/coefficient::delta_f/type::Constant/rank::Scalar/value::WholeMesh/constant",float(delta_f))</string_value>
            <single_build/>
          </update>
          <comment>parameter controlling width of quadratic taper in f near the solidus</comment>
        </parameter>
        <parameter name="invSt">
          <values>
            <string_value lines="1">0.2560163850486431</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::Coupled/coefficient::invSt/type::Constant/rank::Scalar/value::WholeMesh/constant",float(invSt))</string_value>
            <single_build/>
          </update>
          <comment>parameter controlling width of quadratic taper in f near the solidus</comment>
        </parameter>
        <parameter name="Rt">
          <values>
            <string_value lines="1">1.0,1000.0</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::Coupled/coefficient::h_squared/type::Constant/rank::Scalar/value::WholeMesh/constant",float(Rt))</string_value>
            <single_build/>
          </update>
        </parameter>
        <parameter name="FreezingRate">
          <values>
            <string_value lines="1">0.0</string_value>
          </values>
          <update>
            <string_value type="code" language="python3" lines="20">import libspud
libspud.set_option("/system::Coupled/coefficient::FreezingRate/type::Constant/rank::Scalar/value::WholeMesh/constant",float(FreezingRate))</string_value>
            <single_build/>
          </update>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value type="filename" lines="1">../../mesh/square_refined_uni.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="scalefactor">
              <update>
                <string_value type="code" language="python3" lines="20">from string import Template as template
input_file = template(input_file).safe_substitute({'scalefactor':scalefactor})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="meshfiles">
              <python>
                <string_value type="code" language="python3" lines="20">meshfiles = ["square_refined_uni"+ext for ext in ['.xdmf', '.h5', '_facet_ids.xdmf', '_facet_ids.h5', '_cell_ids.xdmf', '_cell_ids.h5']]</string_value>
              </python>
            </filenames>
          </required_output>
          <commands>
            <command name="GMsh">
              <string_value lines="1">gmsh -2 -v 0 -algo del2d square_refined_uni.geo</string_value>
            </command>
            <command name="Convert">
              <string_value lines="1">tfgmsh2xdmf square_refined_uni.msh</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="v">
          <string_value type="code" language="python3" lines="20">import libspud
from buckettools.statfile import parser
from numpy import sqrt

libspud.load_options("schmeling.tfml")
ioname = libspud.get_option("/io/output_base_name")
Ra = libspud.get_option("/system::Stokes/coefficient::Ra/type::Constant/rank::Scalar/value::WholeMesh/constant")
libspud.clear_options()

stat = parser(ioname+".stat")
det  = parser(ioname+".det")

v = {}
v["nu"] = -1.0*(stat["Stokes"]["TemperatureTopSurfaceIntegral"]["functional_value"][:])
v["v_rms"] = sqrt(stat["Stokes"]["VelocityL2NormSquared"]["functional_value"][:])*Ra
v["phi_max"] = stat["Stokes"]["fgradf"]["max"][0][:]
v["melt_volume"] = stat["Magma"]["PorosityIntegral"]["functional_value"][:]
v["t_scaled"] = stat["ElapsedTime"]["value"][:]/Ra
v["Walltime"] = stat["ElapsedWallTime"]["value"][-1]
v["T_tbl"] = det["Stokes"]["Temperature"]["z_tbl"][0]
v["phi_tbl"] = det["Magma"]["Porosity"]["z_tbl"][0]
v["vsz_tbl"] = det["Stokes"]["Velocity_1"]["z_tbl"][0]*Ra</string_value>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="Print">
      <string_value type="code" language="python3" lines="20">import numpy
scalefactor = v.parameters['scalefactor'][-1]
Ras = v.parameters['Ra']
print(Ras)

for Ra in Ras:
  slice = {"Ra":Ra,"scalefactor":scalefactor}
  print('Ra = ', Ra)
  print(v[slice])</string_value>
    </test>
    <test name="Plot">
      <string_value type="code" language="python3" lines="20">import numpy
import matplotlib
# set a display independent backend
matplotlib.use('Agg')
import matplotlib.pyplot as pl

scalefactor = v.parameters['scalefactor'][-1]
Ras = v.parameters['Ra']
print(Ras)

vars = ['v_rms', 'nu','phi_max', 'melt_volume']
labels = ['V_rms', 'Nu', '$\\phi_{max}$','$V_\\phi$']
for Ra in Ras:
  slice = {"Ra":Ra,"scalefactor":scalefactor}
  print('Ra = ', Ra)
  for i in range(len(vars)):
    pl.figure()
    pl.plot( v[slice]["t_scaled"], v[slice][vars[i]])
    pl.xlabel("t'")
    pl.ylabel(labels[i])
    pl.title("Case 4, Ra={0}".format(Ra))
    pl.savefig("Case_4_Ra={0}_{1}.pdf".format(Ra,vars[i]))</string_value>
    </test>
    <test name="Table">
      <string_value type="code" language="python3" lines="20">import numpy
import csv

scalefactor = v.parameters['scalefactor'][-1]
Ras = v.parameters['Ra']
print(Ras)

vars = ['t_scaled', 'v_rms', 'nu','phi_max', 'melt_volume']
for Ra in Ras:
  slice = {"Ra":Ra,"scalefactor":scalefactor}
  print('Ra = ', Ra)
  with open ("Case_4_Ra={0}.csv".format(Ra),'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(vars)
    for i in range(len(v[slice]["t_scaled"])):
      vrow=[v[slice][vars[j]][i] for j in range(len(vars))]
      writer.writerow(vrow)</string_value>
    </test>
    <test name="Walltime">
      <string_value type="code" language="python3" lines="20">scalefactor = v.parameters['scalefactor']
Ra = v.parameters['Ra']
slice = {"scalefactor":scalefactor}
print('walltime =',[ v[slice][i]["Walltime"] for i in range(len(Ra)) ])</string_value>
    </test>
  </tests>
</harness_options>
